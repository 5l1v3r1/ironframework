// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gRPCEmployeeService.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace GRPCEmployeeService {

  /// <summary>Holder for reflection information generated from gRPCEmployeeService.proto</summary>
  public static partial class GRPCEmployeeServiceReflection {

    #region Descriptor
    /// <summary>File descriptor for gRPCEmployeeService.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GRPCEmployeeServiceReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChlnUlBDRW1wbG95ZWVTZXJ2aWNlLnByb3RvEhNnUlBDRW1wbG95ZWVTZXJ2",
            "aWNlImgKFkdldEVtcGxveWVlTGlzdFJlcXVlc3QSEgoKRW1wbG95ZWVJRBgB",
            "IAEoBRIYChBOYXRpb25hbElETnVtYmVyGAIgASgJEhEKCUNvbnRhY3RJRBgD",
            "IAEoBRINCgVUaXRsZRgEIAEoCSL3AQoXR2V0RW1wbG95ZWVMaXN0UmVzcG9u",
            "c2USSAoFSXRlbXMYASADKAsyOS5nUlBDRW1wbG95ZWVTZXJ2aWNlLkdldEVt",
            "cGxveWVlTGlzdFJlc3BvbnNlLkVtcGxveWVlSXRlbRINCgVDb3VudBgCIAEo",
            "BRIRCglJc1N1Y2Nlc3MYAyABKAgSEAoIRXJyb3JNc2cYBCABKAkaXgoMRW1w",
            "bG95ZWVJdGVtEhIKCkVtcGxveWVlSUQYASABKAUSGAoQTmF0aW9uYWxJRE51",
            "bWJlchgCIAEoCRIRCglDb250YWN0SUQYAyABKAUSDQoFVGl0bGUYBCABKAki",
            "KwoVR2V0RW1wbG95ZWVPbmVSZXF1ZXN0EhIKCkVtcGxveWVlSUQYASABKAUi",
            "igEKE0dldEVtcGxveWVlT25lUmVwbHkSEgoKRW1wbG95ZWVJRBgBIAEoBRIN",
            "CgVUaXRsZRgCIAEoCRIYChBOYXRpb25hbElETnVtYmVyGAMgASgJEhEKCUNv",
            "bnRhY3RJRBgEIAEoBRIRCglJc1N1Y2Nlc3MYBSABKAgSEAoIRXJyb3JNc2cY",
            "BiABKAkiUgoTRWRpdEVtcGxveWVlUmVxdWVzdBISCgpFbXBsb3llZUlEGAEg",
            "ASgFEg0KBVRpdGxlGAIgASgJEhgKEE5hdGlvbmFsSUROdW1iZXIYAyABKAki",
            "OAoRRWRpdEVtcGxveWVlUmVwbHkSEQoJSXNTdWNjZXNzGAEgASgIEhAKCEVy",
            "cm9yTXNnGAIgASgJIisKFVJlbW92ZUVtcGxveWVlUmVxdWVzdBISCgpFbXBs",
            "b3llZUlEGAEgASgFIjoKE1JlbW92ZUVtcGxveWVlUmVwbHkSEQoJSXNTdWNj",
            "ZXNzGAEgASgIEhAKCEVycm9yTXNnGAIgASgJMpYDCgRnUlBDEm4KD0dldEVt",
            "cGxveWVlTGlzdBIrLmdSUENFbXBsb3llZVNlcnZpY2UuR2V0RW1wbG95ZWVM",
            "aXN0UmVxdWVzdBosLmdSUENFbXBsb3llZVNlcnZpY2UuR2V0RW1wbG95ZWVM",
            "aXN0UmVzcG9uc2UiABJgCgZHZXRPbmUSKi5nUlBDRW1wbG95ZWVTZXJ2aWNl",
            "LkdldEVtcGxveWVlT25lUmVxdWVzdBooLmdSUENFbXBsb3llZVNlcnZpY2Uu",
            "R2V0RW1wbG95ZWVPbmVSZXBseSIAEloKBEVkaXQSKC5nUlBDRW1wbG95ZWVT",
            "ZXJ2aWNlLkVkaXRFbXBsb3llZVJlcXVlc3QaJi5nUlBDRW1wbG95ZWVTZXJ2",
            "aWNlLkVkaXRFbXBsb3llZVJlcGx5IgASYAoGUmVtb3ZlEiouZ1JQQ0VtcGxv",
            "eWVlU2VydmljZS5SZW1vdmVFbXBsb3llZVJlcXVlc3QaKC5nUlBDRW1wbG95",
            "ZWVTZXJ2aWNlLlJlbW92ZUVtcGxveWVlUmVwbHkiAGIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::GRPCEmployeeService.GetEmployeeListRequest), global::GRPCEmployeeService.GetEmployeeListRequest.Parser, new[]{ "EmployeeID", "NationalIDNumber", "ContactID", "Title" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GRPCEmployeeService.GetEmployeeListResponse), global::GRPCEmployeeService.GetEmployeeListResponse.Parser, new[]{ "Items", "Count", "IsSuccess", "ErrorMsg" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::GRPCEmployeeService.GetEmployeeListResponse.Types.EmployeeItem), global::GRPCEmployeeService.GetEmployeeListResponse.Types.EmployeeItem.Parser, new[]{ "EmployeeID", "NationalIDNumber", "ContactID", "Title" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::GRPCEmployeeService.GetEmployeeOneRequest), global::GRPCEmployeeService.GetEmployeeOneRequest.Parser, new[]{ "EmployeeID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GRPCEmployeeService.GetEmployeeOneReply), global::GRPCEmployeeService.GetEmployeeOneReply.Parser, new[]{ "EmployeeID", "Title", "NationalIDNumber", "ContactID", "IsSuccess", "ErrorMsg" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GRPCEmployeeService.EditEmployeeRequest), global::GRPCEmployeeService.EditEmployeeRequest.Parser, new[]{ "EmployeeID", "Title", "NationalIDNumber" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GRPCEmployeeService.EditEmployeeReply), global::GRPCEmployeeService.EditEmployeeReply.Parser, new[]{ "IsSuccess", "ErrorMsg" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GRPCEmployeeService.RemoveEmployeeRequest), global::GRPCEmployeeService.RemoveEmployeeRequest.Parser, new[]{ "EmployeeID" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::GRPCEmployeeService.RemoveEmployeeReply), global::GRPCEmployeeService.RemoveEmployeeReply.Parser, new[]{ "IsSuccess", "ErrorMsg" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class GetEmployeeListRequest : pb::IMessage<GetEmployeeListRequest> {
    private static readonly pb::MessageParser<GetEmployeeListRequest> _parser = new pb::MessageParser<GetEmployeeListRequest>(() => new GetEmployeeListRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetEmployeeListRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GRPCEmployeeService.GRPCEmployeeServiceReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetEmployeeListRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetEmployeeListRequest(GetEmployeeListRequest other) : this() {
      employeeID_ = other.employeeID_;
      nationalIDNumber_ = other.nationalIDNumber_;
      contactID_ = other.contactID_;
      title_ = other.title_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetEmployeeListRequest Clone() {
      return new GetEmployeeListRequest(this);
    }

    /// <summary>Field number for the "EmployeeID" field.</summary>
    public const int EmployeeIDFieldNumber = 1;
    private int employeeID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EmployeeID {
      get { return employeeID_; }
      set {
        employeeID_ = value;
      }
    }

    /// <summary>Field number for the "NationalIDNumber" field.</summary>
    public const int NationalIDNumberFieldNumber = 2;
    private string nationalIDNumber_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NationalIDNumber {
      get { return nationalIDNumber_; }
      set {
        nationalIDNumber_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ContactID" field.</summary>
    public const int ContactIDFieldNumber = 3;
    private int contactID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ContactID {
      get { return contactID_; }
      set {
        contactID_ = value;
      }
    }

    /// <summary>Field number for the "Title" field.</summary>
    public const int TitleFieldNumber = 4;
    private string title_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Title {
      get { return title_; }
      set {
        title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetEmployeeListRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetEmployeeListRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EmployeeID != other.EmployeeID) return false;
      if (NationalIDNumber != other.NationalIDNumber) return false;
      if (ContactID != other.ContactID) return false;
      if (Title != other.Title) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EmployeeID != 0) hash ^= EmployeeID.GetHashCode();
      if (NationalIDNumber.Length != 0) hash ^= NationalIDNumber.GetHashCode();
      if (ContactID != 0) hash ^= ContactID.GetHashCode();
      if (Title.Length != 0) hash ^= Title.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EmployeeID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(EmployeeID);
      }
      if (NationalIDNumber.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NationalIDNumber);
      }
      if (ContactID != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ContactID);
      }
      if (Title.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Title);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EmployeeID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EmployeeID);
      }
      if (NationalIDNumber.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NationalIDNumber);
      }
      if (ContactID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ContactID);
      }
      if (Title.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetEmployeeListRequest other) {
      if (other == null) {
        return;
      }
      if (other.EmployeeID != 0) {
        EmployeeID = other.EmployeeID;
      }
      if (other.NationalIDNumber.Length != 0) {
        NationalIDNumber = other.NationalIDNumber;
      }
      if (other.ContactID != 0) {
        ContactID = other.ContactID;
      }
      if (other.Title.Length != 0) {
        Title = other.Title;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            EmployeeID = input.ReadInt32();
            break;
          }
          case 18: {
            NationalIDNumber = input.ReadString();
            break;
          }
          case 24: {
            ContactID = input.ReadInt32();
            break;
          }
          case 34: {
            Title = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetEmployeeListResponse : pb::IMessage<GetEmployeeListResponse> {
    private static readonly pb::MessageParser<GetEmployeeListResponse> _parser = new pb::MessageParser<GetEmployeeListResponse>(() => new GetEmployeeListResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetEmployeeListResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GRPCEmployeeService.GRPCEmployeeServiceReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetEmployeeListResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetEmployeeListResponse(GetEmployeeListResponse other) : this() {
      items_ = other.items_.Clone();
      count_ = other.count_;
      isSuccess_ = other.isSuccess_;
      errorMsg_ = other.errorMsg_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetEmployeeListResponse Clone() {
      return new GetEmployeeListResponse(this);
    }

    /// <summary>Field number for the "Items" field.</summary>
    public const int ItemsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::GRPCEmployeeService.GetEmployeeListResponse.Types.EmployeeItem> _repeated_items_codec
        = pb::FieldCodec.ForMessage(10, global::GRPCEmployeeService.GetEmployeeListResponse.Types.EmployeeItem.Parser);
    private readonly pbc::RepeatedField<global::GRPCEmployeeService.GetEmployeeListResponse.Types.EmployeeItem> items_ = new pbc::RepeatedField<global::GRPCEmployeeService.GetEmployeeListResponse.Types.EmployeeItem>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::GRPCEmployeeService.GetEmployeeListResponse.Types.EmployeeItem> Items {
      get { return items_; }
    }

    /// <summary>Field number for the "Count" field.</summary>
    public const int CountFieldNumber = 2;
    private int count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "IsSuccess" field.</summary>
    public const int IsSuccessFieldNumber = 3;
    private bool isSuccess_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSuccess {
      get { return isSuccess_; }
      set {
        isSuccess_ = value;
      }
    }

    /// <summary>Field number for the "ErrorMsg" field.</summary>
    public const int ErrorMsgFieldNumber = 4;
    private string errorMsg_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ErrorMsg {
      get { return errorMsg_; }
      set {
        errorMsg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetEmployeeListResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetEmployeeListResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!items_.Equals(other.items_)) return false;
      if (Count != other.Count) return false;
      if (IsSuccess != other.IsSuccess) return false;
      if (ErrorMsg != other.ErrorMsg) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= items_.GetHashCode();
      if (Count != 0) hash ^= Count.GetHashCode();
      if (IsSuccess != false) hash ^= IsSuccess.GetHashCode();
      if (ErrorMsg.Length != 0) hash ^= ErrorMsg.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      items_.WriteTo(output, _repeated_items_codec);
      if (Count != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Count);
      }
      if (IsSuccess != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsSuccess);
      }
      if (ErrorMsg.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ErrorMsg);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += items_.CalculateSize(_repeated_items_codec);
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      if (IsSuccess != false) {
        size += 1 + 1;
      }
      if (ErrorMsg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrorMsg);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetEmployeeListResponse other) {
      if (other == null) {
        return;
      }
      items_.Add(other.items_);
      if (other.Count != 0) {
        Count = other.Count;
      }
      if (other.IsSuccess != false) {
        IsSuccess = other.IsSuccess;
      }
      if (other.ErrorMsg.Length != 0) {
        ErrorMsg = other.ErrorMsg;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            items_.AddEntriesFrom(input, _repeated_items_codec);
            break;
          }
          case 16: {
            Count = input.ReadInt32();
            break;
          }
          case 24: {
            IsSuccess = input.ReadBool();
            break;
          }
          case 34: {
            ErrorMsg = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the GetEmployeeListResponse message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class EmployeeItem : pb::IMessage<EmployeeItem> {
        private static readonly pb::MessageParser<EmployeeItem> _parser = new pb::MessageParser<EmployeeItem>(() => new EmployeeItem());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<EmployeeItem> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::GRPCEmployeeService.GetEmployeeListResponse.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EmployeeItem() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EmployeeItem(EmployeeItem other) : this() {
          employeeID_ = other.employeeID_;
          nationalIDNumber_ = other.nationalIDNumber_;
          contactID_ = other.contactID_;
          title_ = other.title_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public EmployeeItem Clone() {
          return new EmployeeItem(this);
        }

        /// <summary>Field number for the "EmployeeID" field.</summary>
        public const int EmployeeIDFieldNumber = 1;
        private int employeeID_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int EmployeeID {
          get { return employeeID_; }
          set {
            employeeID_ = value;
          }
        }

        /// <summary>Field number for the "NationalIDNumber" field.</summary>
        public const int NationalIDNumberFieldNumber = 2;
        private string nationalIDNumber_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string NationalIDNumber {
          get { return nationalIDNumber_; }
          set {
            nationalIDNumber_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "ContactID" field.</summary>
        public const int ContactIDFieldNumber = 3;
        private int contactID_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int ContactID {
          get { return contactID_; }
          set {
            contactID_ = value;
          }
        }

        /// <summary>Field number for the "Title" field.</summary>
        public const int TitleFieldNumber = 4;
        private string title_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Title {
          get { return title_; }
          set {
            title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as EmployeeItem);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(EmployeeItem other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (EmployeeID != other.EmployeeID) return false;
          if (NationalIDNumber != other.NationalIDNumber) return false;
          if (ContactID != other.ContactID) return false;
          if (Title != other.Title) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (EmployeeID != 0) hash ^= EmployeeID.GetHashCode();
          if (NationalIDNumber.Length != 0) hash ^= NationalIDNumber.GetHashCode();
          if (ContactID != 0) hash ^= ContactID.GetHashCode();
          if (Title.Length != 0) hash ^= Title.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (EmployeeID != 0) {
            output.WriteRawTag(8);
            output.WriteInt32(EmployeeID);
          }
          if (NationalIDNumber.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(NationalIDNumber);
          }
          if (ContactID != 0) {
            output.WriteRawTag(24);
            output.WriteInt32(ContactID);
          }
          if (Title.Length != 0) {
            output.WriteRawTag(34);
            output.WriteString(Title);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (EmployeeID != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(EmployeeID);
          }
          if (NationalIDNumber.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(NationalIDNumber);
          }
          if (ContactID != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(ContactID);
          }
          if (Title.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(EmployeeItem other) {
          if (other == null) {
            return;
          }
          if (other.EmployeeID != 0) {
            EmployeeID = other.EmployeeID;
          }
          if (other.NationalIDNumber.Length != 0) {
            NationalIDNumber = other.NationalIDNumber;
          }
          if (other.ContactID != 0) {
            ContactID = other.ContactID;
          }
          if (other.Title.Length != 0) {
            Title = other.Title;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                EmployeeID = input.ReadInt32();
                break;
              }
              case 18: {
                NationalIDNumber = input.ReadString();
                break;
              }
              case 24: {
                ContactID = input.ReadInt32();
                break;
              }
              case 34: {
                Title = input.ReadString();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class GetEmployeeOneRequest : pb::IMessage<GetEmployeeOneRequest> {
    private static readonly pb::MessageParser<GetEmployeeOneRequest> _parser = new pb::MessageParser<GetEmployeeOneRequest>(() => new GetEmployeeOneRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetEmployeeOneRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GRPCEmployeeService.GRPCEmployeeServiceReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetEmployeeOneRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetEmployeeOneRequest(GetEmployeeOneRequest other) : this() {
      employeeID_ = other.employeeID_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetEmployeeOneRequest Clone() {
      return new GetEmployeeOneRequest(this);
    }

    /// <summary>Field number for the "EmployeeID" field.</summary>
    public const int EmployeeIDFieldNumber = 1;
    private int employeeID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EmployeeID {
      get { return employeeID_; }
      set {
        employeeID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetEmployeeOneRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetEmployeeOneRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EmployeeID != other.EmployeeID) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EmployeeID != 0) hash ^= EmployeeID.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EmployeeID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(EmployeeID);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EmployeeID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EmployeeID);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetEmployeeOneRequest other) {
      if (other == null) {
        return;
      }
      if (other.EmployeeID != 0) {
        EmployeeID = other.EmployeeID;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            EmployeeID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetEmployeeOneReply : pb::IMessage<GetEmployeeOneReply> {
    private static readonly pb::MessageParser<GetEmployeeOneReply> _parser = new pb::MessageParser<GetEmployeeOneReply>(() => new GetEmployeeOneReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetEmployeeOneReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GRPCEmployeeService.GRPCEmployeeServiceReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetEmployeeOneReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetEmployeeOneReply(GetEmployeeOneReply other) : this() {
      employeeID_ = other.employeeID_;
      title_ = other.title_;
      nationalIDNumber_ = other.nationalIDNumber_;
      contactID_ = other.contactID_;
      isSuccess_ = other.isSuccess_;
      errorMsg_ = other.errorMsg_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetEmployeeOneReply Clone() {
      return new GetEmployeeOneReply(this);
    }

    /// <summary>Field number for the "EmployeeID" field.</summary>
    public const int EmployeeIDFieldNumber = 1;
    private int employeeID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EmployeeID {
      get { return employeeID_; }
      set {
        employeeID_ = value;
      }
    }

    /// <summary>Field number for the "Title" field.</summary>
    public const int TitleFieldNumber = 2;
    private string title_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Title {
      get { return title_; }
      set {
        title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "NationalIDNumber" field.</summary>
    public const int NationalIDNumberFieldNumber = 3;
    private string nationalIDNumber_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NationalIDNumber {
      get { return nationalIDNumber_; }
      set {
        nationalIDNumber_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ContactID" field.</summary>
    public const int ContactIDFieldNumber = 4;
    private int contactID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ContactID {
      get { return contactID_; }
      set {
        contactID_ = value;
      }
    }

    /// <summary>Field number for the "IsSuccess" field.</summary>
    public const int IsSuccessFieldNumber = 5;
    private bool isSuccess_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSuccess {
      get { return isSuccess_; }
      set {
        isSuccess_ = value;
      }
    }

    /// <summary>Field number for the "ErrorMsg" field.</summary>
    public const int ErrorMsgFieldNumber = 6;
    private string errorMsg_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ErrorMsg {
      get { return errorMsg_; }
      set {
        errorMsg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetEmployeeOneReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetEmployeeOneReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EmployeeID != other.EmployeeID) return false;
      if (Title != other.Title) return false;
      if (NationalIDNumber != other.NationalIDNumber) return false;
      if (ContactID != other.ContactID) return false;
      if (IsSuccess != other.IsSuccess) return false;
      if (ErrorMsg != other.ErrorMsg) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EmployeeID != 0) hash ^= EmployeeID.GetHashCode();
      if (Title.Length != 0) hash ^= Title.GetHashCode();
      if (NationalIDNumber.Length != 0) hash ^= NationalIDNumber.GetHashCode();
      if (ContactID != 0) hash ^= ContactID.GetHashCode();
      if (IsSuccess != false) hash ^= IsSuccess.GetHashCode();
      if (ErrorMsg.Length != 0) hash ^= ErrorMsg.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EmployeeID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(EmployeeID);
      }
      if (Title.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Title);
      }
      if (NationalIDNumber.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(NationalIDNumber);
      }
      if (ContactID != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ContactID);
      }
      if (IsSuccess != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsSuccess);
      }
      if (ErrorMsg.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(ErrorMsg);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EmployeeID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EmployeeID);
      }
      if (Title.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
      }
      if (NationalIDNumber.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NationalIDNumber);
      }
      if (ContactID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ContactID);
      }
      if (IsSuccess != false) {
        size += 1 + 1;
      }
      if (ErrorMsg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrorMsg);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetEmployeeOneReply other) {
      if (other == null) {
        return;
      }
      if (other.EmployeeID != 0) {
        EmployeeID = other.EmployeeID;
      }
      if (other.Title.Length != 0) {
        Title = other.Title;
      }
      if (other.NationalIDNumber.Length != 0) {
        NationalIDNumber = other.NationalIDNumber;
      }
      if (other.ContactID != 0) {
        ContactID = other.ContactID;
      }
      if (other.IsSuccess != false) {
        IsSuccess = other.IsSuccess;
      }
      if (other.ErrorMsg.Length != 0) {
        ErrorMsg = other.ErrorMsg;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            EmployeeID = input.ReadInt32();
            break;
          }
          case 18: {
            Title = input.ReadString();
            break;
          }
          case 26: {
            NationalIDNumber = input.ReadString();
            break;
          }
          case 32: {
            ContactID = input.ReadInt32();
            break;
          }
          case 40: {
            IsSuccess = input.ReadBool();
            break;
          }
          case 50: {
            ErrorMsg = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EditEmployeeRequest : pb::IMessage<EditEmployeeRequest> {
    private static readonly pb::MessageParser<EditEmployeeRequest> _parser = new pb::MessageParser<EditEmployeeRequest>(() => new EditEmployeeRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EditEmployeeRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GRPCEmployeeService.GRPCEmployeeServiceReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EditEmployeeRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EditEmployeeRequest(EditEmployeeRequest other) : this() {
      employeeID_ = other.employeeID_;
      title_ = other.title_;
      nationalIDNumber_ = other.nationalIDNumber_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EditEmployeeRequest Clone() {
      return new EditEmployeeRequest(this);
    }

    /// <summary>Field number for the "EmployeeID" field.</summary>
    public const int EmployeeIDFieldNumber = 1;
    private int employeeID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EmployeeID {
      get { return employeeID_; }
      set {
        employeeID_ = value;
      }
    }

    /// <summary>Field number for the "Title" field.</summary>
    public const int TitleFieldNumber = 2;
    private string title_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Title {
      get { return title_; }
      set {
        title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "NationalIDNumber" field.</summary>
    public const int NationalIDNumberFieldNumber = 3;
    private string nationalIDNumber_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NationalIDNumber {
      get { return nationalIDNumber_; }
      set {
        nationalIDNumber_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EditEmployeeRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EditEmployeeRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EmployeeID != other.EmployeeID) return false;
      if (Title != other.Title) return false;
      if (NationalIDNumber != other.NationalIDNumber) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EmployeeID != 0) hash ^= EmployeeID.GetHashCode();
      if (Title.Length != 0) hash ^= Title.GetHashCode();
      if (NationalIDNumber.Length != 0) hash ^= NationalIDNumber.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EmployeeID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(EmployeeID);
      }
      if (Title.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Title);
      }
      if (NationalIDNumber.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(NationalIDNumber);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EmployeeID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EmployeeID);
      }
      if (Title.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
      }
      if (NationalIDNumber.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NationalIDNumber);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EditEmployeeRequest other) {
      if (other == null) {
        return;
      }
      if (other.EmployeeID != 0) {
        EmployeeID = other.EmployeeID;
      }
      if (other.Title.Length != 0) {
        Title = other.Title;
      }
      if (other.NationalIDNumber.Length != 0) {
        NationalIDNumber = other.NationalIDNumber;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            EmployeeID = input.ReadInt32();
            break;
          }
          case 18: {
            Title = input.ReadString();
            break;
          }
          case 26: {
            NationalIDNumber = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EditEmployeeReply : pb::IMessage<EditEmployeeReply> {
    private static readonly pb::MessageParser<EditEmployeeReply> _parser = new pb::MessageParser<EditEmployeeReply>(() => new EditEmployeeReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EditEmployeeReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GRPCEmployeeService.GRPCEmployeeServiceReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EditEmployeeReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EditEmployeeReply(EditEmployeeReply other) : this() {
      isSuccess_ = other.isSuccess_;
      errorMsg_ = other.errorMsg_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EditEmployeeReply Clone() {
      return new EditEmployeeReply(this);
    }

    /// <summary>Field number for the "IsSuccess" field.</summary>
    public const int IsSuccessFieldNumber = 1;
    private bool isSuccess_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSuccess {
      get { return isSuccess_; }
      set {
        isSuccess_ = value;
      }
    }

    /// <summary>Field number for the "ErrorMsg" field.</summary>
    public const int ErrorMsgFieldNumber = 2;
    private string errorMsg_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ErrorMsg {
      get { return errorMsg_; }
      set {
        errorMsg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EditEmployeeReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EditEmployeeReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsSuccess != other.IsSuccess) return false;
      if (ErrorMsg != other.ErrorMsg) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsSuccess != false) hash ^= IsSuccess.GetHashCode();
      if (ErrorMsg.Length != 0) hash ^= ErrorMsg.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsSuccess != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsSuccess);
      }
      if (ErrorMsg.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ErrorMsg);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsSuccess != false) {
        size += 1 + 1;
      }
      if (ErrorMsg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrorMsg);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EditEmployeeReply other) {
      if (other == null) {
        return;
      }
      if (other.IsSuccess != false) {
        IsSuccess = other.IsSuccess;
      }
      if (other.ErrorMsg.Length != 0) {
        ErrorMsg = other.ErrorMsg;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IsSuccess = input.ReadBool();
            break;
          }
          case 18: {
            ErrorMsg = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RemoveEmployeeRequest : pb::IMessage<RemoveEmployeeRequest> {
    private static readonly pb::MessageParser<RemoveEmployeeRequest> _parser = new pb::MessageParser<RemoveEmployeeRequest>(() => new RemoveEmployeeRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RemoveEmployeeRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GRPCEmployeeService.GRPCEmployeeServiceReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveEmployeeRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveEmployeeRequest(RemoveEmployeeRequest other) : this() {
      employeeID_ = other.employeeID_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveEmployeeRequest Clone() {
      return new RemoveEmployeeRequest(this);
    }

    /// <summary>Field number for the "EmployeeID" field.</summary>
    public const int EmployeeIDFieldNumber = 1;
    private int employeeID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EmployeeID {
      get { return employeeID_; }
      set {
        employeeID_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RemoveEmployeeRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RemoveEmployeeRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EmployeeID != other.EmployeeID) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EmployeeID != 0) hash ^= EmployeeID.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EmployeeID != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(EmployeeID);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EmployeeID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EmployeeID);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RemoveEmployeeRequest other) {
      if (other == null) {
        return;
      }
      if (other.EmployeeID != 0) {
        EmployeeID = other.EmployeeID;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            EmployeeID = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RemoveEmployeeReply : pb::IMessage<RemoveEmployeeReply> {
    private static readonly pb::MessageParser<RemoveEmployeeReply> _parser = new pb::MessageParser<RemoveEmployeeReply>(() => new RemoveEmployeeReply());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RemoveEmployeeReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::GRPCEmployeeService.GRPCEmployeeServiceReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveEmployeeReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveEmployeeReply(RemoveEmployeeReply other) : this() {
      isSuccess_ = other.isSuccess_;
      errorMsg_ = other.errorMsg_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveEmployeeReply Clone() {
      return new RemoveEmployeeReply(this);
    }

    /// <summary>Field number for the "IsSuccess" field.</summary>
    public const int IsSuccessFieldNumber = 1;
    private bool isSuccess_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSuccess {
      get { return isSuccess_; }
      set {
        isSuccess_ = value;
      }
    }

    /// <summary>Field number for the "ErrorMsg" field.</summary>
    public const int ErrorMsgFieldNumber = 2;
    private string errorMsg_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ErrorMsg {
      get { return errorMsg_; }
      set {
        errorMsg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RemoveEmployeeReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RemoveEmployeeReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsSuccess != other.IsSuccess) return false;
      if (ErrorMsg != other.ErrorMsg) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsSuccess != false) hash ^= IsSuccess.GetHashCode();
      if (ErrorMsg.Length != 0) hash ^= ErrorMsg.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsSuccess != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsSuccess);
      }
      if (ErrorMsg.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ErrorMsg);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsSuccess != false) {
        size += 1 + 1;
      }
      if (ErrorMsg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrorMsg);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RemoveEmployeeReply other) {
      if (other == null) {
        return;
      }
      if (other.IsSuccess != false) {
        IsSuccess = other.IsSuccess;
      }
      if (other.ErrorMsg.Length != 0) {
        ErrorMsg = other.ErrorMsg;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IsSuccess = input.ReadBool();
            break;
          }
          case 18: {
            ErrorMsg = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
