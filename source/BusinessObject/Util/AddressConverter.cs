//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
// DTO 模型与数据层的实体 相互 转换工具 类
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BusinessObject.Util
{
    using System;using System.ComponentModel.DataAnnotations;
    using System.Runtime.Serialization;using Newtonsoft.Json;
     using DataTransferObject.Model;using BusinessEntities;
     using DataTransferObject;
    using System.Collections.Generic;
    
    public interface IAddressConverter
        {
            Address ConvertDtoToEntities(AddressDto _AddressDto);
            Address ConvertDtoToEntities(AddressDto _AddressDto, Address efAddress);
            Address ConvertDtoToEntities(AddressDto _AddressDto,bool skipNullPropertyValue);
            Address ConvertDtoToEntities(AddressDto _AddressDto, Address efAddress, bool skipNullPropertyValue);
            AddressDto ConvertEntitiesToDto(Address _Address);
         }
    public partial class AddressConverter: IAddressConverter
    {
           /// <summary>
           /// Converts the dto to entities.
           /// </summary>
           /// <param name="_AddressDto">The Address dto.</param>
           /// <returns>Address</returns>
           public Address ConvertDtoToEntities(AddressDto _AddressDto)
           {
              if (_AddressDto==null)
              {
                  throw new ArgumentNullException("model should not be null");
              }
              var efAddress=new Address();
              ConvertObject(_AddressDto, efAddress);
              return efAddress;
           }
    
              /// <summary>
              /// Converts the dto to entities.
              /// </summary>
              /// <param name="_AddressDto">The Address dto</param>
              /// <param name="efAddress">已存在的Address EF model</param>
              /// <returns>Address</returns>
             public Address ConvertDtoToEntities(AddressDto _AddressDto, Address efAddress)
             {
                  if (_AddressDto==null && efAddress==null)
                  {
                       throw new ArgumentNullException("models should not be null");
                  }
                   ConvertObject(_AddressDto, efAddress);
                   return efAddress;
             }
    
           /// <summary>
           /// Converts the dto to entities.
           /// </summary>
           /// <param name="_AddressDto">The Address dto.</param>
           /// <param name="skipNullPropertyValue">if set to <c>true</c> [skip null property value].</param>
          /// <returns>Address</returns>
         public Address ConvertDtoToEntities(AddressDto _AddressDto,bool skipNullPropertyValue)
        {
              if (_AddressDto==null)
              {
                  throw new ArgumentNullException("model should not be null");
              }
    
             var efAddress=new Address();
    
             ConvertObjectWithCheckNull(_AddressDto, skipNullPropertyValue, efAddress);
             return efAddress;
         }
    
             /// <summary>
             /// Converts the dto to entities.
             /// </summary>
             /// <param name="_ AddressDto">The  Address dto.</param>
             /// <param name="ef Address">已存的EntityFramework实体 ef Address</param>
             /// <param name="skipNullPropertyValue">if set to <c>true</c> [skip null property value].</param>
             /// <returns>Address</returns>
           public Address ConvertDtoToEntities(AddressDto _AddressDto, Address efAddress, bool skipNullPropertyValue)
           {
                  if (_AddressDto==null && efAddress==null)
                  {
                       throw new ArgumentNullException("models should not be null");
                  }
    
                 ConvertObjectWithCheckNull(_AddressDto, skipNullPropertyValue, efAddress);
                 return efAddress;
           }
    
          private static void ConvertObjectWithCheckNull(AddressDto _AddressDto, bool skipNullPropertyValue, Address efAddress)
          {
               efAddress.AddressID=_AddressDto.AddressID;
          
               if (!skipNullPropertyValue ||  _AddressDto.AddressLine1 != null) {efAddress.AddressLine1=_AddressDto.AddressLine1; }
        
               if (!skipNullPropertyValue ||  _AddressDto.AddressLine2 != null) {efAddress.AddressLine2=_AddressDto.AddressLine2; }
        
               if (!skipNullPropertyValue ||  _AddressDto.City != null) {efAddress.City=_AddressDto.City; }
                  efAddress.StateProvinceID=_AddressDto.StateProvinceID;
          
               if (!skipNullPropertyValue ||  _AddressDto.PostalCode != null) {efAddress.PostalCode=_AddressDto.PostalCode; }
                  efAddress.rowguid=_AddressDto.rowguid;
                    efAddress.ModifiedDate=_AddressDto.ModifiedDate;
         
            }
    
           /// <summary>
           /// Converts the entities to dto.
          /// </summary>
          /// <param name="_Address">The Address entity</param>
          /// <returns>AddressDto</returns>
         public AddressDto ConvertEntitiesToDto(Address  _Address)
        {
              if (_Address==null)
              {
                       throw new ArgumentNullException("models should not be null");
              }
    
             var _AddressDto =new AddressDto();
                         _AddressDto.AddressID=_Address.AddressID; 
                  _AddressDto.AddressLine1=_Address.AddressLine1; 
                  _AddressDto.AddressLine2=_Address.AddressLine2; 
                  _AddressDto.City=_Address.City; 
                  _AddressDto.StateProvinceID=_Address.StateProvinceID; 
                  _AddressDto.PostalCode=_Address.PostalCode; 
                  _AddressDto.rowguid=_Address.rowguid; 
                  _AddressDto.ModifiedDate=_Address.ModifiedDate; 
                 return _AddressDto;
        }
    
           private static void ConvertObject(AddressDto _AddressDto, Address efAddress)
           {
               efAddress.AddressID=_AddressDto.AddressID; 
                  efAddress.AddressLine1=_AddressDto.AddressLine1; 
                  efAddress.AddressLine2=_AddressDto.AddressLine2; 
                  efAddress.City=_AddressDto.City; 
                  efAddress.StateProvinceID=_AddressDto.StateProvinceID; 
                  efAddress.PostalCode=_AddressDto.PostalCode; 
                  efAddress.rowguid=_AddressDto.rowguid; 
                  efAddress.ModifiedDate=_AddressDto.ModifiedDate; 
              }
    }
           public class FakeAddressConverter:IAddressConverter
           {
    
            public Address ConvertDtoToEntities(AddressDto _AddressDto)
            {
                return new Address();
            }
    
            public Address ConvertDtoToEntities(AddressDto _AddressDto, Address efAddress)
            {
                return new Address();
            }
    
            public Address ConvertDtoToEntities(AddressDto _AddressDto, bool skipNullPropertyValue)
            {
                return new Address();
            }
    
            public Address ConvertDtoToEntities(AddressDto _AddressDto, Address efAddress, bool skipNullPropertyValue)
            {
                return new Address();
            }
    
            public AddressDto ConvertEntitiesToDto(Address _Address)
            {
                return new AddressDto();
            }
          }
}
