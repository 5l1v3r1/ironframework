//------------------------------------------------------------------------------
// <auto-generated>
//    此代码是根据模板生成的。
// DTO 模型与数据层的实体 相互 转换工具 类
//    手动更改此文件可能会导致应用程序中发生异常行为。
//    如果重新生成代码，则将覆盖对此文件的手动更改。
// </auto-generated>
//------------------------------------------------------------------------------

namespace BusinessObject.Util
{
    using System;using System.ComponentModel.DataAnnotations;
    using System.Runtime.Serialization;using Newtonsoft.Json;
     using DataTransferObject.Model;using BusinessEntities;
     using DataTransferObject;
    using System.Collections.Generic;
    
    public interface IContactConverter
        {
            Contact ConvertDtoToEntities(ContactDto _ContactDto);
            Contact ConvertDtoToEntities(ContactDto _ContactDto, Contact efContact);
            Contact ConvertDtoToEntities(ContactDto _ContactDto,bool skipNullPropertyValue);
            Contact ConvertDtoToEntities(ContactDto _ContactDto, Contact efContact, bool skipNullPropertyValue);
            ContactDto ConvertEntitiesToDto(Contact _Contact);
         }
    public partial class ContactConverter: IContactConverter
    {
           /// <summary>
           /// Converts the dto to entities.
           /// </summary>
           /// <param name="_ContactDto">The Contact dto.</param>
           /// <returns>Contact</returns>
           public Contact ConvertDtoToEntities(ContactDto _ContactDto)
           {
              if (_ContactDto==null)
              {
                  throw new ArgumentNullException("model should not be null");
              }
              var efContact=new Contact();
              ConvertObject(_ContactDto, efContact);
              return efContact;
           }
    
              /// <summary>
              /// Converts the dto to entities.
              /// </summary>
              /// <param name="_ContactDto">The Contact dto</param>
              /// <param name="efContact">已存在的Contact EF model</param>
              /// <returns>Contact</returns>
             public Contact ConvertDtoToEntities(ContactDto _ContactDto, Contact efContact)
             {
                  if (_ContactDto==null && efContact==null)
                  {
                       throw new ArgumentNullException("models should not be null");
                  }
                   ConvertObject(_ContactDto, efContact);
                   return efContact;
             }
    
           /// <summary>
           /// Converts the dto to entities.
           /// </summary>
           /// <param name="_ContactDto">The Contact dto.</param>
           /// <param name="skipNullPropertyValue">if set to <c>true</c> [skip null property value].</param>
          /// <returns>Contact</returns>
         public Contact ConvertDtoToEntities(ContactDto _ContactDto,bool skipNullPropertyValue)
        {
              if (_ContactDto==null)
              {
                  throw new ArgumentNullException("model should not be null");
              }
    
             var efContact=new Contact();
    
             ConvertObjectWithCheckNull(_ContactDto, skipNullPropertyValue, efContact);
             return efContact;
         }
    
             /// <summary>
             /// Converts the dto to entities.
             /// </summary>
             /// <param name="_ ContactDto">The  Contact dto.</param>
             /// <param name="ef Contact">已存的EntityFramework实体 ef Contact</param>
             /// <param name="skipNullPropertyValue">if set to <c>true</c> [skip null property value].</param>
             /// <returns>Contact</returns>
           public Contact ConvertDtoToEntities(ContactDto _ContactDto, Contact efContact, bool skipNullPropertyValue)
           {
                  if (_ContactDto==null && efContact==null)
                  {
                       throw new ArgumentNullException("models should not be null");
                  }
    
                 ConvertObjectWithCheckNull(_ContactDto, skipNullPropertyValue, efContact);
                 return efContact;
           }
    
          private static void ConvertObjectWithCheckNull(ContactDto _ContactDto, bool skipNullPropertyValue, Contact efContact)
          {
               efContact.ContactID=_ContactDto.ContactID;
                    efContact.NameStyle=_ContactDto.NameStyle;
          
               if (!skipNullPropertyValue ||  _ContactDto.Title != null) {efContact.Title=_ContactDto.Title; }
        
               if (!skipNullPropertyValue ||  _ContactDto.FirstName != null) {efContact.FirstName=_ContactDto.FirstName; }
        
               if (!skipNullPropertyValue ||  _ContactDto.MiddleName != null) {efContact.MiddleName=_ContactDto.MiddleName; }
        
               if (!skipNullPropertyValue ||  _ContactDto.LastName != null) {efContact.LastName=_ContactDto.LastName; }
        
               if (!skipNullPropertyValue ||  _ContactDto.Suffix != null) {efContact.Suffix=_ContactDto.Suffix; }
        
               if (!skipNullPropertyValue ||  _ContactDto.EmailAddress != null) {efContact.EmailAddress=_ContactDto.EmailAddress; }
                  efContact.EmailPromotion=_ContactDto.EmailPromotion;
          
               if (!skipNullPropertyValue ||  _ContactDto.Phone != null) {efContact.Phone=_ContactDto.Phone; }
        
               if (!skipNullPropertyValue ||  _ContactDto.PasswordHash != null) {efContact.PasswordHash=_ContactDto.PasswordHash; }
        
               if (!skipNullPropertyValue ||  _ContactDto.PasswordSalt != null) {efContact.PasswordSalt=_ContactDto.PasswordSalt; }
        
               if (!skipNullPropertyValue ||  _ContactDto.AdditionalContactInfo != null) {efContact.AdditionalContactInfo=_ContactDto.AdditionalContactInfo; }
                  efContact.rowguid=_ContactDto.rowguid;
                    efContact.ModifiedDate=_ContactDto.ModifiedDate;
         
            }
    
           /// <summary>
           /// Converts the entities to dto.
          /// </summary>
          /// <param name="_Contact">The Contact entity</param>
          /// <returns>ContactDto</returns>
         public ContactDto ConvertEntitiesToDto(Contact  _Contact)
        {
              if (_Contact==null)
              {
                       throw new ArgumentNullException("models should not be null");
              }
    
             var _ContactDto =new ContactDto();
                         _ContactDto.ContactID=_Contact.ContactID; 
                  _ContactDto.NameStyle=_Contact.NameStyle; 
                  _ContactDto.Title=_Contact.Title; 
                  _ContactDto.FirstName=_Contact.FirstName; 
                  _ContactDto.MiddleName=_Contact.MiddleName; 
                  _ContactDto.LastName=_Contact.LastName; 
                  _ContactDto.Suffix=_Contact.Suffix; 
                  _ContactDto.EmailAddress=_Contact.EmailAddress; 
                  _ContactDto.EmailPromotion=_Contact.EmailPromotion; 
                  _ContactDto.Phone=_Contact.Phone; 
                  _ContactDto.PasswordHash=_Contact.PasswordHash; 
                  _ContactDto.PasswordSalt=_Contact.PasswordSalt; 
                  _ContactDto.AdditionalContactInfo=_Contact.AdditionalContactInfo; 
                  _ContactDto.rowguid=_Contact.rowguid; 
                  _ContactDto.ModifiedDate=_Contact.ModifiedDate; 
                 return _ContactDto;
        }
    
           private static void ConvertObject(ContactDto _ContactDto, Contact efContact)
           {
               efContact.ContactID=_ContactDto.ContactID; 
                  efContact.NameStyle=_ContactDto.NameStyle; 
                  efContact.Title=_ContactDto.Title; 
                  efContact.FirstName=_ContactDto.FirstName; 
                  efContact.MiddleName=_ContactDto.MiddleName; 
                  efContact.LastName=_ContactDto.LastName; 
                  efContact.Suffix=_ContactDto.Suffix; 
                  efContact.EmailAddress=_ContactDto.EmailAddress; 
                  efContact.EmailPromotion=_ContactDto.EmailPromotion; 
                  efContact.Phone=_ContactDto.Phone; 
                  efContact.PasswordHash=_ContactDto.PasswordHash; 
                  efContact.PasswordSalt=_ContactDto.PasswordSalt; 
                  efContact.AdditionalContactInfo=_ContactDto.AdditionalContactInfo; 
                  efContact.rowguid=_ContactDto.rowguid; 
                  efContact.ModifiedDate=_ContactDto.ModifiedDate; 
              }
    
        //public virtual EmployeeDto [] Employeess { get; set; }
    }
}
